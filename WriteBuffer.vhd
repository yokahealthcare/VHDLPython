-- File: WriteBuffer.vhd
-- Generated by MyHDL 0.11.45
-- Date: Fri May  3 10:36:58 2024


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity WriteBuffer is
end entity WriteBuffer;


architecture MyHDL of WriteBuffer is



signal clk: std_logic;
signal Buffer0_data_in: unsigned(15 downto 0);
signal Buffer0_data_out: unsigned(15 downto 0);
signal Buffer0_empty: std_logic;
signal Buffer0_full: std_logic;
signal Buffer0_head: unsigned(3 downto 0);
signal Buffer0_tail: unsigned(3 downto 0);
signal Memory0_din: unsigned(15 downto 0);
signal Memory0_dout: unsigned(15 downto 0);
type t_array_Buffer0_mem is array(0 to 8-1) of unsigned(17 downto 0);
signal Buffer0_mem: t_array_Buffer0_mem;
type t_array_Memory0_mem is array(0 to 128-1) of unsigned(15 downto 0);
signal Memory0_mem: t_array_Memory0_mem;

begin


Buffer0_data_in <= to_unsigned(0, 16);
Buffer0_tail <= to_unsigned(0, 4);
Memory0_din <= to_unsigned(500, 16);


WRITEBUFFER_DRIVE_CLK: process is
begin
    while True loop
        clk <= stdl((not bool(clk)));
        wait for 10 * 1 ns;
    end loop;
    wait;
end process WRITEBUFFER_DRIVE_CLK;

WRITEBUFFER_BUFFER0_WRITE_PROCESS: process (clk) is
begin
    if rising_edge(clk) then
        if True then
            Buffer0_mem(to_integer(Buffer0_head)) <= resize(Buffer0_data_in, 18);
            Buffer0_head <= ((Buffer0_head + 1) mod 8);
        end if;
    end if;
end process WRITEBUFFER_BUFFER0_WRITE_PROCESS;

WRITEBUFFER_BUFFER0_READ_PROCESS: process (Buffer0_tail, Buffer0_head, Buffer0_mem) is
begin
    if (Buffer0_head /= Buffer0_tail) then
        Buffer0_data_out <= resize(Buffer0_mem(to_integer(Buffer0_tail)), 16);
    else
        Buffer0_data_out <= to_unsigned(0, 16);
    end if;
end process WRITEBUFFER_BUFFER0_READ_PROCESS;


Buffer0_full <= stdl(((Buffer0_head + 1) mod 8) = Buffer0_tail);


Buffer0_empty <= stdl(Buffer0_head = Buffer0_tail);

WRITEBUFFER_MEMORY0_WRITE: process (clk) is
begin
    if rising_edge(clk) then
        if True then
            Memory0_mem(2) <= Memory0_din;
        end if;
    end if;
end process WRITEBUFFER_MEMORY0_WRITE;


Memory0_dout <= Memory0_mem(2);

end architecture MyHDL;
